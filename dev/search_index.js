var documenterSearchIndex = {"docs":
[{"location":"simulation/#GasTranSim.jl-Documentation","page":"Simulation Engine","title":"GasTranSim.jl Documentation","text":"","category":"section"},{"location":"simulation/#Calling-the-simulator","page":"Simulation Engine","title":"Calling the simulator","text":"","category":"section"},{"location":"simulation/","page":"Simulation Engine","title":"Simulation Engine","text":"We shall illustrate the simplest call  to invoke the simulator and then explain the various input arguments with reference to the simple case of  a single pipe. The input files are contained in the directory examples/data/1-pipe-fast-transients/","category":"page"},{"location":"simulation/","page":"Simulation Engine","title":"Simulation Engine","text":"The initialization function for the simulator has the definition initialize_simulator(data_folder::AbstractString;case_name::AbstractString=\"\", case_types::Vector{Symbol}=Symbol[], kwargs...)","category":"page"},{"location":"simulation/","page":"Simulation Engine","title":"Simulation Engine","text":"From Julia REPL, the simplest call is:","category":"page"},{"location":"simulation/","page":"Simulation Engine","title":"Simulation Engine","text":"folder = \"examples/data/1-pipe-fast-transients/\"\nts = initialize_simulator(folder)\n# equivalent to the call\nts = initialize_simulator(folder; eos = :ideal, case_name=\"\", case_types=[:params, :network, :bc, :ic])","category":"page"},{"location":"simulation/","page":"Simulation Engine","title":"Simulation Engine","text":"The minimal function call implicitly looks for all input files in the path folder. It assumes the equation of the state for the natural gas to be that given by the ideal gas equation, and that the case_name is an empty string. Thus it looks for input files params.json, network.json, bc.json, ic.json.","category":"page"},{"location":"simulation/","page":"Simulation Engine","title":"Simulation Engine","text":"However, suppose one wanted to use the same network, parameters and initial conditions with different boundary conditions in say the file bc_new_case.json, and with the CNGA equation of state. Then one would use the call:","category":"page"},{"location":"simulation/","page":"Simulation Engine","title":"Simulation Engine","text":"folder = \"examples/data/1-pipe-fast-transients/\"\nts = initialize_simulator(folder; eos = :simple_cnga, case_name=\"new_case\", case_types=[:bc])","category":"page"},{"location":"simulation/","page":"Simulation Engine","title":"Simulation Engine","text":"If the initial conditions are also different, and stored in ic_new_case.json, then the call would be modified to","category":"page"},{"location":"simulation/","page":"Simulation Engine","title":"Simulation Engine","text":"folder = \"examples/data/1-pipe-fast-transients/\"\nts = initialize_simulator(folder; eos = :simple_cnga, case_name=\"new_case\", case_types=[:bc, :ic])","category":"page"},{"location":"simulation/","page":"Simulation Engine","title":"Simulation Engine","text":"Once the simulator is initialized, it is run by invoking","category":"page"},{"location":"simulation/","page":"Simulation Engine","title":"Simulation Engine","text":"run_simulator!(ts)","category":"page"},{"location":"simulation/#Saving-output","page":"Simulation Engine","title":"Saving output","text":"","category":"section"},{"location":"simulation/","page":"Simulation Engine","title":"Simulation Engine","text":"At the end of the simulation, there are two types of output we are interested in.","category":"page"},{"location":"simulation/","page":"Simulation Engine","title":"Simulation Engine","text":"A record of pressures/density at every node (junction) of the network, and the inflows/outflows into each pipe of the network at a frequency (Output dt) specified in the input file params.json.\nThe state of the network at the end of the simulation, i.e., the values of the pressure/density and the mass flux along the pipes throughout the network are recorded following the spatial resolution (Output dx) set in the input file params.json. This information is stored in the same format as ic.json so that a new simulation can use the final state as the new initial condition and move forward in time.","category":"page"},{"location":"simulation/","page":"Simulation Engine","title":"Simulation Engine","text":"Both of these tasks are accomplished as follows:","category":"page"},{"location":"simulation/","page":"Simulation Engine","title":"Simulation Engine","text":"folder = \"examples/data/1-pipe-fast-transients/\"\nts = initialize_simulator(folder)\nrun_simulator!(ts)\nwrite_output(ts; output_path = folder, \n\toutput_file = \"output_time_history.json\", final_state_file = \"ic_restart.json\")","category":"page"},{"location":"simulation/","page":"Simulation Engine","title":"Simulation Engine","text":"Note that the flag for Save final state in params.json must be set to 1 in order to enable saving the output.","category":"page"},{"location":"simulation/","page":"Simulation Engine","title":"Simulation Engine","text":"The file test/sim_restart.jl demonstrates that one run of the simulator from 0 to 24 hours is equivalent to  two successive runs, one from 0 to 12 hours, and then the next one from 12 - 24 hours.","category":"page"},{"location":"theory/#GasTranSim.jl-Documentation","page":"Theory","title":"GasTranSim.jl Documentation","text":"","category":"section"},{"location":"theory/#Governing-Equations-and-Discretization","page":"Theory","title":"Governing Equations and Discretization","text":"","category":"section"},{"location":"theory/","page":"Theory","title":"Theory","text":"The governing equations and the equation of state are formulated in terms of the density rho, pressure p, and mass-flux phi for a pipe with given diameter D and known friction factor lambda as","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"partial_t rho + partial_x phi = 0 partial_t phi + partial_x p = -fraclambda2Dfracphi phirho p = Z(p T)RTrho","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"This system is augmented with given initial conditions and boundary conditions. For a network, initial conditions specify rho p phi everywhere at initial time t = t_0. For  times t  t_0, at every junction in the network, the withdrawal (mass-flow per unit time) is assumed to be zero, unless specified otherwise, while the pressure/density is specified at \\emph{at least} one junction. These are the boundary conditions for the problem.","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"For each compressor, its action is assumed to be given through specification of one of the following quantities for all time - (i) the compressor ratio (ii) the compressor delivery pressure (iii) the mass-flow through the compressor. ","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"In order to solve the problem, we discretize the governing equations using the explicit, second order, staggered finite difference  discretization scheme proposed by","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"V. Gyrya and A. Zlotnik (2019). An explicit staggered-grid method for numerical simulation of large-scale natural gas pipeline networks. (doi:10.1016/j.apm.2018.07.051)","category":"page"},{"location":"theory/#Nondimensionalized-Equations","page":"Theory","title":"Nondimensionalized Equations","text":"","category":"section"},{"location":"theory/","page":"Theory","title":"Theory","text":"Let us choose the nominal quantities p_0 rho_0 v_0 phi_0 t_0 l_0f_0 A_0 for pressure, density, velocity, mass flux, time, length, mass flow and cross-sectional area respectively.","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"Then we can rewrite the governing equations in nondimensional variables barrho bartbarphi barx dotsc  through the substitutions rho = rho_0 barrho t = t_0bart dotsc.","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"Then  dfracpartial barrhopartial bart + left( dfracphi_0t_0rho_0l_0 right)dfracpartial barphipartial barx = 0 and dfracpartial barphipartial bart + left( dfracp_0t_0l_0phi_0 right)dfracpartial barppartial barx = -dfraclambda2Dleft( dfracphi_0t_0rho_0 right) dfracbarphibarphibarrho","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"We use a fixed value for the speed of sound a, choose values for l_0 p_0 rho_0 v_0 based on the data, and set A_0 =1 phi_0 = rho_0 v_0 t_0 = l_0v_0 f_0 = phi_0 A_0.","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"This choice of values reduces the governing equations to  dfracpartial barrhopartial bart + dfracpartial barphipartial barx = 0 dfracpartial barphipartial bart + dfracmathcalCmathcalM^2dfracpartial barppartial barx = -left( dfraclambda2Dl_0 right) dfracbarphibarphibarrho","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"where mathcalC =  dfracp_0rho_0 a^2 and mathcalM = dfracv_0a are the Euler number and Mach number respectively.","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"The ideal gas equation, p = rho R_g T transforms to barrho = mathcalC barp since a = sqrtR_gT. In non-isothermal problems, we can define a nominal temperature T_0  and set a=sqrtR_gT_0 in that case to get barrho = dfracmathcalCT_0T barp.","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"For a non-ideal gas, assuming the CNGA equation of state we have pcdot(b_1 + b_2 p) = rho R_g T which simplifies to the expression barrho = left ( barb_1 + barb_2barp right ) barp, where barb_1 = mathcalCb_1 barb_2 = mathcalCp_0 b_2. ","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"The speed of sound a in a gas  is given by a^2 = dfracd pd rho.  For an ideal gas, we get a^2 = R_g T, or in nondimensional terms dfracdbarpdbarrho = 1mathcalC = bara^2.","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"For a simple CNGA equation, pcdot(b_1 + b_2 p) = rho R_g T, we can calculate the sound speed from dfracd rhod p since dfracd pd rho cdot dfracd rhod p = 1. Thus  a_CNGA^2 = dfracR_g Tb_1 + 2b_2 p. Since b_1  1 b_2  0 p  0, a_CNGA  a. We can reach the same conclusion from the fact that  dfracd barpd barrho = dfrac1barb_1 + 2barb_2barp and barb_1  mathcalC barb_2  0.","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"Let us record the CFL condition and its consequence next. Usually, it would be stated as a Delta t Delta x leq 1, but to be safe, we consider $ a \\Delta {t}/ \\Delta {x} \\leq k$ for k= 09.  The dimensionless form of this condition is Delta bart (mathcalM Delta barx) leq k.","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"The CFL condition  was derived in the paper assuming the ideal gas equation but we use it for non-ideal gas as well since we have relaxed k=09.  For the particular choice v_0 = a, we  get mathcalC = mathcalM  = 1.","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"Setting Delta barx = barLm,  we can find the number of pipe segments m.","category":"page"},{"location":"examples/#GasTranSim.jl-Documentation","page":"Examples","title":"GasTranSim.jl Documentation","text":"","category":"section"},{"location":"examples/#Overview","page":"Examples","title":"Overview","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Some example problems have been solved to illustrate the use of this simulator.  Two of the problems are based on the case of a single pipe, while the other two  are for  networks with 8 and 30 nodes respectively.","category":"page"},{"location":"examples/#Single-pipe-and-8-node-network-example","page":"Examples","title":"Single pipe and 8 node network example","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"These three examples are taken from ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"V. Gyrya and A. Zlotnik (2019). An explicit staggered-grid method for numerical simulation of large-scale natural gas pipeline networks. (doi:10.1016/j.apm.2018.07.051)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The directory 1-pipe-fast-transients contains the input data and source files related to Section 5.2 in the article.\nThe directory 1-pipe-slow-transients pertains to Section 5.3 in the paper.\nThe directory 8-node replicates some results of the problem discussed in Section 6 of the paper.","category":"page"},{"location":"examples/#30-node-network-example","page":"Examples","title":"30 node network example","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The directory  model30 has the input data and source files to demonstrate that if we start with a steady state initial condition,  the same steady state solution can be recovered from the transient simulation.","category":"page"},{"location":"examples/#Running-the-examples","page":"Examples","title":"Running the examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Each of the four examples has its own file that can be invoked from the root directory as follows ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"import Pkg \nPkg.activate(\"examples/\")\ninclude(\"examples/1-pipe-fast.jl\")","category":"page"},{"location":"inputs/#GasTranSim.jl-Documentation","page":"Input Files","title":"GasTranSim.jl Documentation","text":"","category":"section"},{"location":"inputs/#Overview","page":"Input Files","title":"Overview","text":"","category":"section"},{"location":"inputs/","page":"Input Files","title":"Input Files","text":"Before illustrating the call  to invoke the simulator, we go over  the various input data files  and their contents with reference to the simple case of  a single pipe. These input files are contained in the directory examples/data/model1pipe_fast_transients/","category":"page"},{"location":"inputs/#Description-of-network-(network.json)","page":"Input Files","title":"Description of network (network.json)","text":"","category":"section"},{"location":"inputs/","page":"Input Files","title":"Input Files","text":"A single pipe gives rise to a network structure of two vertices (ends of the pipe) and one edge (pipe). This topological information is encoded in network.json. Information about compressors is included here if present and nodes which have pressure specified (slack-nodes) are indicated through a boolean flag.","category":"page"},{"location":"inputs/","page":"Input Files","title":"Input Files","text":"{\n    \"nodes\": {\n        \"1\": {\n            \"node_id\": 1,\n            \"node_name\": \"n1\",\n            \"x_coord\": -1,\n            \"y_coord\": 0,\n            \"min_pressure\": 3000000,\n            \"max_pressure\": 6000000,\n            \"min_injection\": 0,\n            \"max_injection\": 1000,\n            \"slack_bool\": 1\n        },\n        \"2\": {\n            \"node_id\": 2,\n            \"node_name\": \"n2\",\n            \"x_coord\": -0.0421,\n            \"y_coord\": 0,\n            \"min_pressure\": 3000000,\n            \"max_pressure\": 6000000,\n            \"min_injection\": -1000,\n            \"max_injection\": 1000,\n            \"slack_bool\": 0\n        }\n    },\n    \"pipes\": {\n        \"1\": {\n            \"pipe_id\": 1,\n            \"pipe_name\": \"p1\",\n            \"from_node\": 1,\n            \"to_node\": 2,\n            \"diameter\": 0.9144,\n            \"length\": 20000,\n            \"friction_factor\": 0.01,\n            \"disc_seg\": 0\n        }\n    }\n}","category":"page"},{"location":"inputs/","page":"Input Files","title":"Input Files","text":"Note that at quantities like diameter, length and pressure have numbers associated, but we do not know what  units they refer to. The required information to interpret these numbers is specified in another input file  which we now describe.","category":"page"},{"location":"inputs/#Problem-parameters-(params.json)","page":"Input Files","title":"Problem parameters (params.json)","text":"","category":"section"},{"location":"inputs/","page":"Input Files","title":"Input Files","text":"This file records the parameters of the problem and the units in which they are specified.","category":"page"},{"location":"inputs/","page":"Input Files","title":"Input Files","text":"{\n\"simulation_params\": {\n    \"Temperature (K):\": 239.11,\n    \"Gas specific gravity (G):\": 0.6,\n    \"Specific heat capacity ratio\": 1.4,\n    \"units (SI = 0, standard = 1)\": 0.0,\n    \"Initial time\": 0,\n    \"Final time\": 3600,\n    \"Discretization time step\": 1,\n    \"Courant number (must be between 0 and 1, recommended value is 0.9)\": 0.90,\n    \"Output dt\": 1.0,\n    \"Output dx\": 1000.0,\n    \"Save final state\": 1.0\n\t}\n}","category":"page"},{"location":"inputs/","page":"Input Files","title":"Input Files","text":"Thus, the fixed time step for the simulation, the time step to be used for  saving the results as output if indicated are all specified here.","category":"page"},{"location":"inputs/#Boundary-conditions-(bc.json)","page":"Input Files","title":"Boundary conditions (bc.json)","text":"","category":"section"},{"location":"inputs/","page":"Input Files","title":"Input Files","text":"For the case of a single pipe, conditions have to be specified at the two ends.  The network.json file already indicated  that the left end is a slack node, where pressure will be specified for all times.  Gas withdrawal is specified as a function of time at the other end. The list of discrete time instants and the corresponding value are specified in the json file  and these values are interpolated when necessary.","category":"page"},{"location":"inputs/","page":"Input Files","title":"Input Files","text":"{\n    \"boundary_nonslack_flow\": {\n        \"2\": {\n            \"time\": [\n                0,\n                599,\n                600,\n                1799,\n                1800,\n                86400\n            ],\n            \"value\": [\n                0,\n                0,\n                787.63, \n                787.63,\n                78.76,\n                78.76\n            ]\n        }\n    },\n    \"boundary_pslack\": {\n        \"1\": {\n            \"time\": [\n                0,\n                86400\n            ],\n            \"value\": [\n                6.5e6,\n                6.5e6\n            ]\n        }\n    }\n}","category":"page"},{"location":"inputs/#Initial-condition-(ic.json)","page":"Input Files","title":"Initial condition (ic.json)","text":"","category":"section"},{"location":"inputs/","page":"Input Files","title":"Input Files","text":"The initial condition should specify the pressure and mass flux throughout the network at the initial time instant. For this case in particular, the initial nodal pressures and the mass flux along the length of the pipe should be specified.","category":"page"},{"location":"inputs/","page":"Input Files","title":"Input Files","text":"{\n    \"initial_nodal_pressure\": {\n        \"1\": 6.5e6,\n        \"2\": 6.5e6\n    },\n    \"initial_pipe_flow\": {\n        \"1\": 0\n    }\n}","category":"page"},{"location":"inputs/","page":"Input Files","title":"Input Files","text":"Note that here the initial conditions correspond to a steady flow which is why the flow is the same throughout the pipe. In general, the initial condition will have flows that are spatially varying, in which case instead of specifying a single scalar, the mass flux at discrete lengths along the pipe will be recorded, analogous to what we saw above with bc.json for temporal variation. We shall deal with such a case subsequently.","category":"page"},{"location":"#GasTranSim.jl-Documentation","page":"Introduction","title":"GasTranSim.jl Documentation","text":"","category":"section"},{"location":"#Overview","page":"Introduction","title":"Overview","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"GasTranSim.jl is a Julia/JuMP package for simulating transient flow of a gas through a given network of gas pipelines which may include compressors/boosting stations with defined operation.  The simulator allows us to predict the pressure and mass-flux (mass-flow per unit time for unit cross-sectional area) throughout the pipeline network for a given  time interval. Moreover, it allows the user to save the state of the simulation at a particular time instant, and restart the simulation seamlessly from the saved state.","category":"page"},{"location":"#Description-of-network","page":"Introduction","title":"Description of network","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The gas pipeline network may be thought of as a graph, where the edges are pipelines/compressors, and vertices are junctions of different pipes and/or compressors. The pipeline junctions in the network can have specified gas supply/withdrawal (mass flow per unit time) or a specified pressure. The operation of a compressor element is defined by specifying one of the following: (i) compressor ratio (r > 1, ratio of pressures across the ends of the compressor) (ii) delivery pressure (iii) mass flow per unit time through the compressor.","category":"page"},{"location":"#Installation-Guide","page":"Introduction","title":"Installation Guide","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"To use GasTranSim, first download and install Julia or open up a remote notebook at JuliaBox or similar services.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"This version of GasTranSim is compatible with Julia 1.0 and later.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"From Julia REPL, GasTranSim is installed by using the built-in package manager:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"import Pkg\nPkg.add(\"GasTranSim\")","category":"page"},{"location":"#Unit-Tests","page":"Introduction","title":"Unit Tests","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"To run the tests in the package, run the following command within the Julia REPL after installing the package.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"import Pkg\nPkg.test(\"GasTranSim\")","category":"page"}]
}
